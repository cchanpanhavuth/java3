Index: target/classes/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\r\nspring.datasource.url=jdbc:mysql://localhost:3306/up_db_java\r\nspring.datasource.username=user_java\r\nspring.datasource.password=password_java\r\nspring.jpa.show-sql=true\r\n#spring.jpa.hibernate.ddl-auto=create-drop\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect\r\nspring.jpa.properties.hibernate.dialect.storage_engine=innodb\r\nspring.sql.init.mode=never\r\n# swagger-ui custom path\r\nspringdoc.swagger-ui.path=/swagger-ui.html\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/target/classes/application.properties b/target/classes/application.properties
--- a/target/classes/application.properties	(revision 443d53da929ed0969df9ee6ccd5cb82ef0a329c7)
+++ b/target/classes/application.properties	(date 1683136438778)
@@ -1,7 +1,7 @@
 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
-spring.datasource.url=jdbc:mysql://localhost:3306/up_db_java
-spring.datasource.username=user_java
-spring.datasource.password=password_java
+spring.datasource.url=jdbc:mysql://localhost:3306/phalleng_spring
+spring.datasource.username=phalleng
+spring.datasource.password=password@123
 spring.jpa.show-sql=true
 #spring.jpa.hibernate.ddl-auto=create-drop
 spring.jpa.hibernate.ddl-auto=update
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\r\nspring.datasource.url=jdbc:mysql://localhost:3306/up_db_java\r\nspring.datasource.username=user_java\r\nspring.datasource.password=password_java\r\nspring.jpa.show-sql=true\r\n#spring.jpa.hibernate.ddl-auto=create-drop\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect\r\nspring.jpa.properties.hibernate.dialect.storage_engine=innodb\r\nspring.sql.init.mode=never\r\n# swagger-ui custom path\r\nspringdoc.swagger-ui.path=/swagger-ui.html\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 443d53da929ed0969df9ee6ccd5cb82ef0a329c7)
+++ b/src/main/resources/application.properties	(date 1683136438785)
@@ -1,7 +1,7 @@
 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
-spring.datasource.url=jdbc:mysql://localhost:3306/up_db_java
-spring.datasource.username=user_java
-spring.datasource.password=password_java
+spring.datasource.url=jdbc:mysql://localhost:3306/phalleng_spring
+spring.datasource.username=phalleng
+spring.datasource.password=password@123
 spring.jpa.show-sql=true
 #spring.jpa.hibernate.ddl-auto=create-drop
 spring.jpa.hibernate.ddl-auto=update
Index: src/main/java/com/example/controller/CarController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//package com.example.controller;\r\n//\r\n//import com.example.entity.projection.CarProjection;\r\n//import com.example.entity.response.Pagination;\r\n//import com.example.service.CarService;\r\n//import org.springframework.web.bind.annotation.*;\r\n//\r\n//import java.util.HashMap;\r\n//import java.util.List;\r\n//import java.util.Map;\r\n//\r\n//@RestController\r\n//@RequestMapping(\"/car\")\r\n//public class CarController {\r\n//\r\n//    private CarService carService;\r\n////    private CategoryService categoryService;\r\n////    private CarModelService carModelService;\r\n////    //private InventoryService inventoryService;\r\n////    //private BrandService brandService;\r\n////    //private ManufacturerLocationService manufacturerLocationService;\r\n////    //private BranchService branchService;\r\n////    private CarFeaturesService carFeaturesService;\r\n////\r\n////    @Autowired\r\n////    public CarController(\r\n////            CarService carService,\r\n////            CategoryService categoryService,\r\n////            CarModelService carModelService,\r\n//////            InventoryService inventoryService,\r\n//////            BrandService brandService,\r\n//////            ManufacturerLocationService manufacturerLocationService,\r\n//////            BranchService branchService,\r\n////            CarFeaturesService carFeaturesService\r\n////    ){\r\n////        this.carService = carService;\r\n////        this.categoryService = categoryService;\r\n////        this.carModelService = carModelService;\r\n//////        this.inventoryService = inventoryService;\r\n//////        this.branchService = branchService;\r\n//////        this.manufacturerLocationService = manufacturerLocationService;\r\n//////        this.brandService = brandService;\r\n////        this.carFeaturesService = carFeaturesService;\r\n////    }\r\n////\r\n////    @PostMapping\r\n////    public Car add(@RequestBody CarAddRequest req){\r\n////        Category category = this.categoryService.findById(req.getCategoryId());\r\n////        CarModel carModel = this.carModelService.findById(req.getCarModelId());\r\n////        //Inventory inventory = this.inventoryService.findById(req.getInventoryId());\r\n////        //Brand brand = this.brandService.findById(req.getBrandId());\r\n////        //ManufacturerLocation manufacturerLocation = this.manufacturerLocationService.findById(req.getManufacturerLocationId());\r\n////        //Branch branch = this.branchService.findById(req.getBranchId());\r\n////        CarFeatures carFeatures = this.carFeaturesService.findById(req.getCarFeatureId());\r\n////        if(category ==null){\r\n////            System.out.println(\"Category is not found!\");\r\n////            return null;\r\n////        } else if (carModel ==null) {\r\n////            System.out.println(\"Car Model is not found!\");\r\n////            return null;\r\n//////        }else if (inventory ==null) {\r\n//////            System.out.println(\"Inventory is not found!\");\r\n//////            return null;\r\n//////        }else if (brand ==null) {\r\n//////            System.out.println(\"Brand is not found!\");\r\n//////            return null;\r\n//////        }else if (manufacturerLocation ==null) {\r\n//////            System.out.println(\"Manufacturer Location is not found!\");\r\n//////            return null;\r\n//////        }else if (branch ==null) {\r\n//////            System.out.println(\"Branch Location is not found!\");\r\n//////            return null;\r\n////        }else if (carFeatures ==null) {\r\n////            System.out.println(\"Car Features Location is not found!\");\r\n////            return null;\r\n////        }\r\n////        Car car = new Car();\r\n////        //car.setBrand_name(brand);\r\n////        //car.setInventory(inventory);\r\n////        //car.setManufacturer_location(manufacturerLocation);\r\n////        //car.setBranch_name(branch);\r\n////        //car.setModel_name(carModel);\r\n////        //car.setFeatures_id(carFeatures);\r\n////        car.setPrice(req.getPrice());\r\n////        //car.setCategory_name(category);\r\n////        this.carService.add(car);\r\n////        return null;\r\n////        //return car;\r\n////    }\r\n////\r\n////    @PutMapping\r\n////    public Car update(@RequestBody CarUpdateRequest req){\r\n////        Category category = this.categoryService.findById(req.getCategoryId());\r\n////        CarModel carModel = this.carModelService.findById(req.getCarModelId());\r\n//////        Inventory inventory = this.inventoryService.findById(req.getInventoryId());\r\n//////        Brand brand = this.brandService.findById(req.getBrandId());\r\n//////        ManufacturerLocation manufacturerLocation = this.manufacturerLocationService.findById(req.getManufacturerLocationId());\r\n//////        Branch branch = this.branchService.findById(req.getBranchId());\r\n////        CarFeatures carFeatures = this.carFeaturesService.findById(req.getCarFeatureId());\r\n////        if(category ==null){\r\n////            System.out.println(\"Category is not found!\");\r\n////            return null;\r\n////        } else if (carModel ==null) {\r\n////            System.out.println(\"Car Model is not found!\");\r\n////            return null;\r\n//////        }else if (inventory ==null) {\r\n//////            System.out.println(\"Inventory is not found!\");\r\n//////            return null;\r\n//////        }else if (brand ==null) {\r\n//////            System.out.println(\"Brand is not found!\");\r\n//////            return null;\r\n//////        }else if (manufacturerLocation ==null) {\r\n//////            System.out.println(\"Manufacturer Location is not found!\");\r\n//////            return null;\r\n//////        }else if (branch ==null) {\r\n//////            System.out.println(\"Branch Location is not found!\");\r\n//////            return null;\r\n////        }else if (carFeatures ==null) {\r\n////            System.out.println(\"Car Features Location is not found!\");\r\n////            return null;\r\n////        }\r\n////        Car car = new Car();\r\n////        //car.setBrand_name(brand);\r\n////        //car.setInventory(inventory);\r\n////        //car.setManufacturer_location(manufacturerLocation);\r\n////        //car.setBranch_name(branch);\r\n////        //car.setModel_name(carModel);\r\n////        //car.setFeatures_id(carFeatures);\r\n////        car.setPrice(req.getPrice());\r\n////        //car.setCategory_name(category);\r\n////        this.carService.update(car);\r\n////        return null;\r\n////    }\r\n//\r\n//    @DeleteMapping(\"/{id}\")\r\n//    public boolean delete(@PathVariable Long id){\r\n//        return this.carService.deleteById(id);\r\n//    }\r\n//\r\n//    @GetMapping(\"/price/{price}\")\r\n//    public CarProjection findByCarPrice(@PathVariable Double price){\r\n//        return this.carService.findByCarPrice(price);\r\n//    }\r\n//\r\n//    @GetMapping(\"/all\")\r\n//    public Map<String, Object> findAllCar(Pagination pagination){\r\n//        List<CarProjection> car = this.carService.findCarProjectionAll(pagination);\r\n//        Map<String, Object> map = new HashMap<>();\r\n//        map.put(\"data\", car);\r\n//        map.put(\"pagination\", pagination);\r\n//        return map;\r\n//    }\r\n//\r\n//    @GetMapping\r\n//    public List<CarProjection> findByPrice(){\r\n//        return this.carService.findAllCar();\r\n//    }\r\n//\r\n////    @PostMapping\r\n////    public CarFeatures add(@RequestBody CarFeatures carFeatures){\r\n////        return this.carFeaturesService.add(carFeatures);\r\n////    }\r\n//\r\n//\r\n//\r\n//}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/controller/CarController.java b/src/main/java/com/example/controller/CarController.java
--- a/src/main/java/com/example/controller/CarController.java	(revision 443d53da929ed0969df9ee6ccd5cb82ef0a329c7)
+++ b/src/main/java/com/example/controller/CarController.java	(date 1683136439327)
@@ -1,166 +1,142 @@
-//package com.example.controller;
-//
-//import com.example.entity.projection.CarProjection;
-//import com.example.entity.response.Pagination;
-//import com.example.service.CarService;
-//import org.springframework.web.bind.annotation.*;
-//
-//import java.util.HashMap;
-//import java.util.List;
-//import java.util.Map;
-//
-//@RestController
-//@RequestMapping("/car")
-//public class CarController {
-//
-//    private CarService carService;
-////    private CategoryService categoryService;
-////    private CarModelService carModelService;
-////    //private InventoryService inventoryService;
-////    //private BrandService brandService;
-////    //private ManufacturerLocationService manufacturerLocationService;
-////    //private BranchService branchService;
-////    private CarFeaturesService carFeaturesService;
-////
-////    @Autowired
-////    public CarController(
-////            CarService carService,
-////            CategoryService categoryService,
-////            CarModelService carModelService,
-//////            InventoryService inventoryService,
-//////            BrandService brandService,
-//////            ManufacturerLocationService manufacturerLocationService,
-//////            BranchService branchService,
-////            CarFeaturesService carFeaturesService
-////    ){
-////        this.carService = carService;
-////        this.categoryService = categoryService;
-////        this.carModelService = carModelService;
-//////        this.inventoryService = inventoryService;
-//////        this.branchService = branchService;
-//////        this.manufacturerLocationService = manufacturerLocationService;
-//////        this.brandService = brandService;
-////        this.carFeaturesService = carFeaturesService;
-////    }
-////
-////    @PostMapping
-////    public Car add(@RequestBody CarAddRequest req){
-////        Category category = this.categoryService.findById(req.getCategoryId());
-////        CarModel carModel = this.carModelService.findById(req.getCarModelId());
-////        //Inventory inventory = this.inventoryService.findById(req.getInventoryId());
-////        //Brand brand = this.brandService.findById(req.getBrandId());
-////        //ManufacturerLocation manufacturerLocation = this.manufacturerLocationService.findById(req.getManufacturerLocationId());
-////        //Branch branch = this.branchService.findById(req.getBranchId());
-////        CarFeatures carFeatures = this.carFeaturesService.findById(req.getCarFeatureId());
-////        if(category ==null){
-////            System.out.println("Category is not found!");
-////            return null;
-////        } else if (carModel ==null) {
-////            System.out.println("Car Model is not found!");
-////            return null;
-//////        }else if (inventory ==null) {
-//////            System.out.println("Inventory is not found!");
-//////            return null;
-//////        }else if (brand ==null) {
-//////            System.out.println("Brand is not found!");
-//////            return null;
-//////        }else if (manufacturerLocation ==null) {
-//////            System.out.println("Manufacturer Location is not found!");
-//////            return null;
-//////        }else if (branch ==null) {
-//////            System.out.println("Branch Location is not found!");
-//////            return null;
-////        }else if (carFeatures ==null) {
-////            System.out.println("Car Features Location is not found!");
-////            return null;
-////        }
-////        Car car = new Car();
-////        //car.setBrand_name(brand);
-////        //car.setInventory(inventory);
-////        //car.setManufacturer_location(manufacturerLocation);
-////        //car.setBranch_name(branch);
-////        //car.setModel_name(carModel);
-////        //car.setFeatures_id(carFeatures);
-////        car.setPrice(req.getPrice());
-////        //car.setCategory_name(category);
-////        this.carService.add(car);
-////        return null;
-////        //return car;
-////    }
-////
-////    @PutMapping
-////    public Car update(@RequestBody CarUpdateRequest req){
-////        Category category = this.categoryService.findById(req.getCategoryId());
-////        CarModel carModel = this.carModelService.findById(req.getCarModelId());
-//////        Inventory inventory = this.inventoryService.findById(req.getInventoryId());
-//////        Brand brand = this.brandService.findById(req.getBrandId());
-//////        ManufacturerLocation manufacturerLocation = this.manufacturerLocationService.findById(req.getManufacturerLocationId());
-//////        Branch branch = this.branchService.findById(req.getBranchId());
-////        CarFeatures carFeatures = this.carFeaturesService.findById(req.getCarFeatureId());
-////        if(category ==null){
-////            System.out.println("Category is not found!");
-////            return null;
-////        } else if (carModel ==null) {
-////            System.out.println("Car Model is not found!");
-////            return null;
-//////        }else if (inventory ==null) {
-//////            System.out.println("Inventory is not found!");
-//////            return null;
-//////        }else if (brand ==null) {
-//////            System.out.println("Brand is not found!");
-//////            return null;
-//////        }else if (manufacturerLocation ==null) {
-//////            System.out.println("Manufacturer Location is not found!");
-//////            return null;
-//////        }else if (branch ==null) {
-//////            System.out.println("Branch Location is not found!");
-//////            return null;
-////        }else if (carFeatures ==null) {
-////            System.out.println("Car Features Location is not found!");
-////            return null;
-////        }
-////        Car car = new Car();
-////        //car.setBrand_name(brand);
-////        //car.setInventory(inventory);
-////        //car.setManufacturer_location(manufacturerLocation);
-////        //car.setBranch_name(branch);
-////        //car.setModel_name(carModel);
-////        //car.setFeatures_id(carFeatures);
-////        car.setPrice(req.getPrice());
-////        //car.setCategory_name(category);
-////        this.carService.update(car);
-////        return null;
-////    }
-//
-//    @DeleteMapping("/{id}")
-//    public boolean delete(@PathVariable Long id){
-//        return this.carService.deleteById(id);
-//    }
-//
-//    @GetMapping("/price/{price}")
-//    public CarProjection findByCarPrice(@PathVariable Double price){
-//        return this.carService.findByCarPrice(price);
-//    }
-//
-//    @GetMapping("/all")
-//    public Map<String, Object> findAllCar(Pagination pagination){
-//        List<CarProjection> car = this.carService.findCarProjectionAll(pagination);
-//        Map<String, Object> map = new HashMap<>();
-//        map.put("data", car);
-//        map.put("pagination", pagination);
-//        return map;
-//    }
-//
-//    @GetMapping
-//    public List<CarProjection> findByPrice(){
-//        return this.carService.findAllCar();
-//    }
-//
-////    @PostMapping
-////    public CarFeatures add(@RequestBody CarFeatures carFeatures){
-////        return this.carFeaturesService.add(carFeatures);
-////    }
-//
-//
-//
-//}
+package com.example.controller;
+
+import com.example.entity.*;
+import com.example.entity.Car;
+import com.example.entity.request.CarAddRequest;
+import com.example.entity.request.CarUpdateRequest;
+import com.example.service.CarFeaturesService;
+import com.example.service.CarModelService;
+import com.example.service.CarService;
+import com.example.service.CategoryService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+
+@RestController
+@RequestMapping("/car")
+public class CarController {
+
+    private CarService carService;
+    private CategoryService categoryService;
+    private CarModelService carModelService;
+    private InventoryService inventoryService;
+    private BrandService brandService;
+    private ManufacturerLocationService manufacturerLocationService;
+    private BranchService branchService;
+    private CarFeaturesService carFeaturesService;
+
+    @Autowired
+    public CarController(
+            CarService carService,
+            CategoryService categoryService,
+            CarModelService carModelService,
+            InventoryService inventoryService,
+            BrandService brandService,
+            ManufacturerLocationService manufacturerLocationService,
+            BranchService branchService,
+            CarFeaturesService carFeaturesService
+    ){
+        this.carService = carService;
+        this.categoryService = categoryService;
+        this.carModelService = carModelService;
+        this.inventoryService = inventoryService;
+        this.branchService = branchService;
+        this.manufacturerLocationService = manufacturerLocationService;
+        this.brandService = brandService;
+        this.carFeaturesService = carFeaturesService;
+    }
+
+    @PostMapping
+    public Car add(@RequestBody CarAddRequest req){
+        Category category = this.categoryService.findById(req.getCategoryId());
+        CarModel carModel = this.carModelService.findById(req.getCarModelId());
+        Inventory inventory = this.inventoryService.findById(req.getInventoryId());
+        Brand brand = this.brandService.findById(req.getBrandId());
+        ManufacturerLocation manufacturerLocation = this.manufacturerLocationService.findById(req.getManufacturerLocationId());
+        Branch branch = this.branchService.findById(req.getBranchId());
+        CarFeatures carFeatures = this.carFeaturesService.findById(req.getCarFeatureId());
+        if(category ==null){
+            System.out.println("Category is not found!");
+            return null;
+        } else if (carModel ==null) {
+            System.out.println("Car Model is not found!");
+            return null;
+        }else if (inventory ==null) {
+            System.out.println("Inventory is not found!");
+            return null;
+        }else if (brand ==null) {
+            System.out.println("Brand is not found!");
+            return null;
+        }else if (manufacturerLocation ==null) {
+            System.out.println("Manufacturer Location is not found!");
+            return null;
+        }else if (branch ==null) {
+            System.out.println("Branch Location is not found!");
+            return null;
+        }else if (carFeatures ==null) {
+            System.out.println("Car Features Location is not found!");
+            return null;
+        }
+        Car car = new Car();
+        car.setBrand_name(brand);
+        car.setInventory(inventory);
+        car.setManufacturer_location(manufacturerLocation);
+        car.setBranch_name(branch);
+        car.setModel_name(carModel);
+        car.setFeatures_id(carFeatures);
+        car.setPrice(req.getPrice());
+        car.setCategory_name(category);
+        this.carService.add(car);
+        return car;
+    }
+
+    @PutMapping
+    public Car update(@RequestBody CarUpdateRequest req){
+        Category category = this.categoryService.findById(req.getCategoryId());
+        CarModel carModel = this.carModelService.findById(req.getCarModelId());
+        Inventory inventory = this.inventoryService.findById(req.getInventoryId());
+        Brand brand = this.brandService.findById(req.getBrandId());
+        ManufacturerLocation manufacturerLocation = this.manufacturerLocationService.findById(req.getManufacturerLocationId());
+        Branch branch = this.branchService.findById(req.getBranchId());
+        CarFeatures carFeatures = this.carFeaturesService.findById(req.getCarFeatureId());
+        if(category ==null){
+            System.out.println("Category is not found!");
+            return null;
+        } else if (carModel ==null) {
+            System.out.println("Car Model is not found!");
+            return null;
+        }else if (inventory ==null) {
+            System.out.println("Inventory is not found!");
+            return null;
+        }else if (brand ==null) {
+            System.out.println("Brand is not found!");
+            return null;
+        }else if (manufacturerLocation ==null) {
+            System.out.println("Manufacturer Location is not found!");
+            return null;
+        }else if (branch ==null) {
+            System.out.println("Branch Location is not found!");
+            return null;
+        }else if (carFeatures ==null) {
+            System.out.println("Car Features Location is not found!");
+            return null;
+        }
+        Car car = new Car();
+        car.setBrand_name(brand);
+        car.setInventory(inventory);
+        car.setManufacturer_location(manufacturerLocation);
+        car.setBranch_name(branch);
+        car.setModel_name(carModel);
+        car.setFeatures_id(carFeatures);
+        car.setPrice(req.getPrice());
+        car.setCategory_name(category);
+        this.carService.update(car);
+        return null;
+    }
+
+    @DeleteMapping("/{id}")
+    public boolean delete(@PathVariable Long id){
+        return this.carService.deleteById(id);
+    }
+
+
+}
